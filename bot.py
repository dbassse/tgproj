import base64
import aiohttp
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = "7862122325:AAHWae2MOU_rZnTOvdpJMduoamgyZgeP0QU"
PLANTID_API_KEY = "n9p0XsKZeMRLIRFNheoVlM28G8xxt65LErsXrQI5Ghym20IecH"
PLANTID_API_URL = "https://api.plant.id/v3/identification"

# –ö–Ω–æ–ø–∫–∞ /start
start_button = ReplyKeyboardMarkup(
    [[KeyboardButton('/start')]],
    resize_keyboard=True,
    one_time_keyboard=False
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è, –∏ —è —Ä–∞—Å–ø–∏—à—É —Ç–µ–±–µ –µ–≥–æ –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É üåø",
        reply_markup=start_button
    )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–µ–Ω –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ
    if not update.message.photo:
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    photo = await update.message.photo[-1].get_file()
    image_bytes = await photo.download_as_bytearray()

    # –ö–æ–¥–∏—Ä—É–µ–º –≤ Base64 –∏ –≥–æ—Ç–æ–≤–∏–º payload
    img_base64 = base64.b64encode(image_bytes).decode('ascii')
    payload = {"images": [img_base64]}
    headers = {"Api-Key": PLANTID_API_KEY}

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    async with aiohttp.ClientSession() as session:
        resp = await session.post(
            PLANTID_API_URL,
            headers=headers,
            json=payload,
        )
        resp_json = await resp.json()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º suggestions
    suggestions = (
        resp_json.get('result', {})
                 .get('classification', {})
                 .get('suggestions', [])
    )

    # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–π
    if not suggestions:
        await update.message.reply_text(
            "‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ.",
            reply_markup=start_button
        )
        return

    # –ë–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    plant = suggestions[0]
    name_scientific = plant.get('name') or plant.get('plant_name') or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

    # –û–±—ã—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    common_list = plant.get('details', {}).get('common_names')
    name_common = common_list[0] if common_list else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

    # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
    probability = plant.get('probability', 0)

    # URL –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
    url = plant.get('details', {}).get('url', '')

    # –û–ø–∏—Å–∞–Ω–∏–µ
    description = (
        plant.get('details', {})
             .get('wiki_description', {})
             .get('value', '')
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = (
        f"üå± –ù–∞—É—á–Ω–æ–µ: {name_scientific}\n"
        f"üìù –û–±—ã—á–Ω–æ–µ: {name_common}\n"
        f"üîç –¢–æ—á–Ω–æ—Å—Ç—å: {probability:.1%}\n"
    )
    if url:
        text += f"üåê –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {url}\n"
    if description:
        text += f"\n{description}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await update.message.reply_text(
        text,
        reply_markup=start_button
    )

if __name__ == '__main__':
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.run_polling()